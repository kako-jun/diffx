name: Performance Benchmark

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  CARGO_TERM_COLOR: always

jobs:
  benchmark:
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Shorter timeout
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-bench-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run benchmarks
      run: |
        # Quick benchmark run with shorter sampling time
        CARGO_CRITERION_ARGS="--sample-size 10 --measurement-time 1" cargo bench --package diffx-core > benchmark_results.txt 2>&1 || true
        cat benchmark_results.txt
        
    - name: Check performance regression
      run: |
        # Show benchmark results for debugging
        echo "=== Benchmark Results ==="
        cat benchmark_results.txt
        echo "=========================="
        
        # Extract criterion benchmark results more carefully
        SMALL_LINE=$(grep "diff_small_json" benchmark_results.txt -A 1 | grep "time:" | head -1)
        LARGE_LINE=$(grep "diff_large_json" benchmark_results.txt -A 1 | grep "time:" | head -1)
        
        echo "Small line: $SMALL_LINE"
        echo "Large line: $LARGE_LINE"
        
        # Extract middle value and unit from criterion format like "[951.50 ns 953.19 ns 955.44 ns]"
        SMALL_TIME=$(echo "$SMALL_LINE" | sed -n 's/.*\[\([0-9.]*\) \([a-z]*\)s \([0-9.]*\) \([a-z]*\)s \([0-9.]*\) \([a-z]*\)s\].*/\3/p')
        SMALL_UNIT=$(echo "$SMALL_LINE" | sed -n 's/.*\[\([0-9.]*\) \([a-z]*\)s \([0-9.]*\) \([a-z]*\)s \([0-9.]*\) \([a-z]*\)s\].*/\4/p')
        
        LARGE_TIME=$(echo "$LARGE_LINE" | sed -n 's/.*\[\([0-9.]*\) \([a-z]*\)s \([0-9.]*\) \([a-z]*\)s \([0-9.]*\) \([a-z]*\)s\].*/\3/p')
        LARGE_UNIT=$(echo "$LARGE_LINE" | sed -n 's/.*\[\([0-9.]*\) \([a-z]*\)s \([0-9.]*\) \([a-z]*\)s \([0-9.]*\) \([a-z]*\)s\].*/\4/p')
        
        echo "Small: $SMALL_TIME ${SMALL_UNIT}s"
        echo "Large: $LARGE_TIME ${LARGE_UNIT}s"
        
        # Convert to microseconds
        if [ "$SMALL_UNIT" = "n" ]; then
          SMALL_TIME_US=$(echo "scale=3; $SMALL_TIME / 1000" | bc -l)
        elif [ "$SMALL_UNIT" = "¬µ" ] || [ "$SMALL_UNIT" = "u" ]; then
          SMALL_TIME_US=$SMALL_TIME
        elif [ "$SMALL_UNIT" = "m" ]; then
          SMALL_TIME_US=$(echo "scale=3; $SMALL_TIME * 1000" | bc -l)
        else
          SMALL_TIME_US=$SMALL_TIME
        fi
        
        if [ "$LARGE_UNIT" = "n" ]; then
          LARGE_TIME_US=$(echo "scale=3; $LARGE_TIME / 1000" | bc -l)
        elif [ "$LARGE_UNIT" = "¬µ" ] || [ "$LARGE_UNIT" = "u" ]; then
          LARGE_TIME_US=$LARGE_TIME
        elif [ "$LARGE_UNIT" = "m" ]; then
          LARGE_TIME_US=$(echo "scale=3; $LARGE_TIME * 1000" | bc -l)
        else
          LARGE_TIME_US=$LARGE_TIME
        fi
        
        echo "Small JSON diff time: ${SMALL_TIME_US}¬µs"
        echo "Large JSON diff time: ${LARGE_TIME_US}¬µs"
        
        # Performance thresholds (more realistic for modern systems)
        SMALL_THRESHOLD=5.0   # ¬µs (allowing for CI noise)
        LARGE_THRESHOLD=1000  # ¬µs (allowing for CI noise)
        
        # Check if performance is within acceptable range
        if (( $(echo "$SMALL_TIME_US > $SMALL_THRESHOLD" | bc -l) )); then
          echo "‚ùå Performance regression detected in small JSON test!"
          echo "Expected: < ${SMALL_THRESHOLD}¬µs, Got: ${SMALL_TIME_US}¬µs"
          exit 1
        fi
        
        if (( $(echo "$LARGE_TIME_US > $LARGE_THRESHOLD" | bc -l) )); then
          echo "‚ùå Performance regression detected in large JSON test!"
          echo "Expected: < ${LARGE_THRESHOLD}¬µs, Got: ${LARGE_TIME_US}¬µs"
          exit 1
        fi
        
        echo "‚úÖ Performance tests passed!"
        echo "Small JSON: ${SMALL_TIME_US}¬µs (threshold: ${SMALL_THRESHOLD}¬µs)"
        echo "Large JSON: ${LARGE_TIME_US}¬µs (threshold: ${LARGE_THRESHOLD}¬µs)"
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: |
          benchmark_results.txt
          target/criterion/
        retention-days: 30

  benchmark-comparison:
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Shorter timeout
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-bench-pr-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run PR benchmarks
      run: |
        CARGO_CRITERION_ARGS="--sample-size 10 --measurement-time 1" cargo bench --package diffx-core > pr_benchmark.txt 2>&1 || true
        echo "## üìä Performance Impact" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Benchmark Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        cat pr_benchmark.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Performance Thresholds" >> $GITHUB_STEP_SUMMARY
        echo "- Small JSON diff: < 5.0¬µs" >> $GITHUB_STEP_SUMMARY
        echo "- Large JSON diff: < 1000¬µs" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Extract performance using same logic as main job
        SMALL_LINE=$(grep "diff_small_json" pr_benchmark.txt -A 1 | grep "time:" | head -1)
        LARGE_LINE=$(grep "diff_large_json" pr_benchmark.txt -A 1 | grep "time:" | head -1)
        
        SMALL_TIME=$(echo "$SMALL_LINE" | sed -n 's/.*\[\([0-9.]*\) \([a-z]*\)s \([0-9.]*\) \([a-z]*\)s \([0-9.]*\) \([a-z]*\)s\].*/\3/p')
        SMALL_UNIT=$(echo "$SMALL_LINE" | sed -n 's/.*\[\([0-9.]*\) \([a-z]*\)s \([0-9.]*\) \([a-z]*\)s \([0-9.]*\) \([a-z]*\)s\].*/\4/p')
        
        LARGE_TIME=$(echo "$LARGE_LINE" | sed -n 's/.*\[\([0-9.]*\) \([a-z]*\)s \([0-9.]*\) \([a-z]*\)s \([0-9.]*\) \([a-z]*\)s\].*/\3/p')
        LARGE_UNIT=$(echo "$LARGE_LINE" | sed -n 's/.*\[\([0-9.]*\) \([a-z]*\)s \([0-9.]*\) \([a-z]*\)s \([0-9.]*\) \([a-z]*\)s\].*/\4/p')
        
        # Convert to microseconds
        if [ "$SMALL_UNIT" = "n" ]; then
          SMALL_TIME_US=$(echo "scale=3; $SMALL_TIME / 1000" | bc -l)
        elif [ "$SMALL_UNIT" = "¬µ" ] || [ "$SMALL_UNIT" = "u" ]; then
          SMALL_TIME_US=$SMALL_TIME
        elif [ "$SMALL_UNIT" = "m" ]; then
          SMALL_TIME_US=$(echo "scale=3; $SMALL_TIME * 1000" | bc -l)
        else
          SMALL_TIME_US=$SMALL_TIME
        fi
        
        if [ "$LARGE_UNIT" = "n" ]; then
          LARGE_TIME_US=$(echo "scale=3; $LARGE_TIME / 1000" | bc -l)
        elif [ "$LARGE_UNIT" = "¬µ" ] || [ "$LARGE_UNIT" = "u" ]; then
          LARGE_TIME_US=$LARGE_TIME
        elif [ "$LARGE_UNIT" = "m" ]; then
          LARGE_TIME_US=$(echo "scale=3; $LARGE_TIME * 1000" | bc -l)
        else
          LARGE_TIME_US=$LARGE_TIME
        fi
        
        echo "### Current Performance" >> $GITHUB_STEP_SUMMARY
        echo "- Small JSON: ${SMALL_TIME_US}¬µs" >> $GITHUB_STEP_SUMMARY
        echo "- Large JSON: ${LARGE_TIME_US}¬µs" >> $GITHUB_STEP_SUMMARY
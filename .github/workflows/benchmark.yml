name: Performance Benchmark

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  CARGO_TERM_COLOR: always

jobs:
  benchmark:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-bench-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run benchmarks
      run: |
        cargo bench --package diffx-core > benchmark_results.txt
        cat benchmark_results.txt
        
    - name: Check performance regression
      run: |
        # Extract timing from benchmark results
        SMALL_TIME=$(grep "diff_small_json" benchmark_results.txt | grep -oP "time:\s+\[\K[0-9.]+(?=\s+.s)" | head -1)
        LARGE_TIME=$(grep "diff_large_json" benchmark_results.txt | grep -oP "time:\s+\[\K[0-9.]+(?=\s+.s)" | head -1)
        
        echo "Small JSON diff time: ${SMALL_TIME}¬µs"
        echo "Large JSON diff time: ${LARGE_TIME}¬µs"
        
        # Performance thresholds (allow 50% variance for CI noise)
        SMALL_THRESHOLD=2.0  # ¬µs (baseline ~1.3¬µs)
        LARGE_THRESHOLD=500  # ¬µs (baseline ~281¬µs)
        
        # Check if performance is within acceptable range
        if (( $(echo "$SMALL_TIME > $SMALL_THRESHOLD" | bc -l) )); then
          echo "‚ùå Performance regression detected in small JSON test!"
          echo "Expected: < ${SMALL_THRESHOLD}¬µs, Got: ${SMALL_TIME}¬µs"
          exit 1
        fi
        
        if (( $(echo "$LARGE_TIME > $LARGE_THRESHOLD" | bc -l) )); then
          echo "‚ùå Performance regression detected in large JSON test!"
          echo "Expected: < ${LARGE_THRESHOLD}¬µs, Got: ${LARGE_TIME}¬µs"
          exit 1
        fi
        
        echo "‚úÖ Performance tests passed!"
        echo "Small JSON: ${SMALL_TIME}¬µs (threshold: ${SMALL_THRESHOLD}¬µs)"
        echo "Large JSON: ${LARGE_TIME}¬µs (threshold: ${LARGE_THRESHOLD}¬µs)"
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: |
          benchmark_results.txt
          target/criterion/
        retention-days: 30

  benchmark-comparison:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-bench-pr-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run PR benchmarks
      run: |
        cargo bench --package diffx-core > pr_benchmark.txt
        echo "## üìä Performance Impact" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Benchmark Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        cat pr_benchmark.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Performance Thresholds" >> $GITHUB_STEP_SUMMARY
        echo "- Small JSON diff: < 2.0¬µs" >> $GITHUB_STEP_SUMMARY
        echo "- Large JSON diff: < 500¬µs" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Extract and report current performance
        SMALL_TIME=$(grep "diff_small_json" pr_benchmark.txt | grep -oP "time:\s+\[\K[0-9.]+(?=\s+.s)" | head -1)
        LARGE_TIME=$(grep "diff_large_json" pr_benchmark.txt | grep -oP "time:\s+\[\K[0-9.]+(?=\s+.s)" | head -1)
        
        echo "### Current Performance" >> $GITHUB_STEP_SUMMARY
        echo "- Small JSON: ${SMALL_TIME}¬µs" >> $GITHUB_STEP_SUMMARY
        echo "- Large JSON: ${LARGE_TIME}¬µs" >> $GITHUB_STEP_SUMMARY